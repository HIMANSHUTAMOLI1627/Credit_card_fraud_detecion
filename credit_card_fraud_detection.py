# -*- coding: utf-8 -*-
"""Credit Card Fraud Detection.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/11ZGc4jGVnocj6ygwsa0IPs3K_xa1E_w_
"""

import numpy as np
import pandas as pd

fraud_train = pd.read_csv("/content/fraudTrain.csv")
fraud_train.head()
fraud_train.info()

fraud_test = pd.read_csv("/content/fraudTest.csv")
fraud_test.head()
fraud_test.info()

fraud_train = fraud_train.drop(columns = 'Unnamed: 0')
fraud_test = fraud_test.drop(columns = 'Unnamed: 0')
fraud_train.columns
fraud_test.columns

fraud_train.head()

from sklearn.preprocessing import LabelEncoder
encoder=LabelEncoder()
fraud_train['trans_date_trans_time']=encoder.fit_transform(fraud_train['trans_date_trans_time'])
fraud_train['merchant']=encoder.fit_transform(fraud_train['merchant'])
fraud_train['category']=encoder.fit_transform(fraud_train['category'])
fraud_train['first']=encoder.fit_transform(fraud_train['first'])
fraud_train['last']=encoder.fit_transform(fraud_train['last'])
fraud_train['gender']=encoder.fit_transform(fraud_train['gender'])
fraud_train['street']=encoder.fit_transform(fraud_train['street'])
fraud_train['city']=encoder.fit_transform(fraud_train['city'])
fraud_train['state']=encoder.fit_transform(fraud_train['state'])
fraud_train['job']=encoder.fit_transform(fraud_train['job'])
fraud_train['dob']=encoder.fit_transform(fraud_train['dob'])
fraud_train['trans_num']=encoder.fit_transform(fraud_train['trans_num'])

fraud_test['trans_date_trans_time']=encoder.fit_transform(fraud_test['trans_date_trans_time'])
fraud_test['merchant']=encoder.fit_transform(fraud_test['merchant'])
fraud_test['category']=encoder.fit_transform(fraud_test['category'])
fraud_test['first']=encoder.fit_transform(fraud_test['first'])
fraud_test['last']=encoder.fit_transform(fraud_test['last'])
fraud_test['gender']=encoder.fit_transform(fraud_test['gender'])
fraud_test['street']=encoder.fit_transform(fraud_test['street'])
fraud_test['city']=encoder.fit_transform(fraud_test['city'])
fraud_test['state']=encoder.fit_transform(fraud_test['state'])
fraud_test['job']=encoder.fit_transform(fraud_test['job'])
fraud_test['dob']=encoder.fit_transform(fraud_test['dob'])
fraud_test['trans_num']=encoder.fit_transform(fraud_test['trans_num'])

fraud_train.head()

fraud_test.head()

fraud_train.columns

fraud_test.columns

fraud_train.shape,fraud_test.shape

x_train=fraud_train.drop(columns='is_fraud')
y_train=fraud_train['is_fraud']
y_train = y_train.dropna()
x_train = x_train.loc[y_train.index]
x_test=fraud_test.drop(columns='is_fraud')
y_test=fraud_test['is_fraud']
y_test = y_test.fillna(y_test.mean())

from sklearn.tree import DecisionTreeClassifier
from sklearn.ensemble import RandomForestClassifier
from sklearn.linear_model import LogisticRegression
# Instantiate the classifier
dtc = DecisionTreeClassifier()
rfc = RandomForestClassifier()
lr = LogisticRegression()

dtc.fit(x_train, y_train)

from sklearn.metrics import accuracy_score
y_test_pred = dtc.predict(x_test)
y_test_binary= (y_test > 0.5).astype(int)
accuracy = accuracy_score(y_test_binary, y_test_pred)
print("The Accuracy of Decision Tree Classifier is :",accuracy)

from sklearn.impute import SimpleImputer
imputer = SimpleImputer(strategy='mean')

# Fit the imputer on your training data and transform both training and testing data
x_train_imputed = imputer.fit_transform(x_train)
x_test_imputed = imputer.transform(x_test)
y_test_binary= (y_test > 0.5).astype(int)
# Instantiate and fit the classifier on imputed data
rfc = RandomForestClassifier()
rfc.fit(x_train_imputed, y_train)

# Make predictions on imputed test data
y_test_pred = rfc.predict(x_test_imputed)

accuracy = accuracy_score(y_test_binary, y_test_pred)
print("The Accuracy of Random Forest Classifier is :",accuracy)

# Instantiate and fit the classifier on imputed data
lr.fit(x_train_imputed, y_train)
# Make predictions on imputed test data
y_test_pred = lr.predict(x_test_imputed)

y_test_binary= (y_test > 0.5).astype(int)
accuracy = accuracy_score(y_test_binary, y_test_pred)
print("The Accuracy of Logistic Regression is :",accuracy)